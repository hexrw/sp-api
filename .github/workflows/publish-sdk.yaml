name: publish-sdk

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: "Existing sdk tag or ref to publish"
        required: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  NPM_TOKEN: ${{ secrets.NPM_SECRET }}
  TAG_NAME: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || (github.event_name == 'release' && github.event.release.tag_name) }}

jobs:
  publish:
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'release' && (
        startsWith(github.event.release.tag_name, '@selling-partner-api/sdk@') ||
        startsWith(github.event.release.tag_name, 'sdk-v') ||
        startsWith(github.event.release.tag_name, 'sdk/v')
      ))
    runs-on: ubuntu-latest
    steps:
      - name: Resolve tag
        run: |
          if [ -z "${TAG_NAME:-}" ]; then
            echo "TAG_NAME could not be determined" >&2
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ env.TAG_NAME }}
          submodules: recursive
          fetch-depth: 0

      - name: Ensure docs workspace manifest
        run: |
          if [ -d docs ] && [ ! -f docs/package.json ]; then
            echo '{"name":"@selling-partner-api/docs","version":"0.0.0","private":true,"type":"module"}' > docs/package.json
          fi

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.23"

      - name: Setup Node for npm publish
        uses: actions/setup-node@v5
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run lint checks
        run: bun run lint

      - name: Build SDK package
        run: bun run build:sdk

      - name: Run unit tests
        run: bunx vitest run --coverage

      - name: Determine release metadata
        id: meta
        run: |
          NORMALIZED="${TAG_NAME}";
          NORMALIZED="${NORMALIZED#@selling-partner-api/sdk@}"
          NORMALIZED="${NORMALIZED#sdk/v}"
          NORMALIZED="${NORMALIZED#sdk-v}"

          if [[ -z "${NORMALIZED}" || "${NORMALIZED}" = "${TAG_NAME}" ]]; then
            echo "Unable to derive version from tag ${TAG_NAME}" >&2
            exit 1
          fi

          PACKAGE_VERSION=$(node -p "require('./packages/sdk/package.json').version")
          if [ "${PACKAGE_VERSION}" != "${NORMALIZED}" ]; then
            echo "Tag ${TAG_NAME} implies version ${NORMALIZED}, but package.json contains ${PACKAGE_VERSION}" >&2
            exit 1
          fi

          echo "version=${NORMALIZED}" >> "$GITHUB_OUTPUT"

      - name: Wait for @selling-partner-api/models availability
        run: |
          REQUIRED_VERSION=$(node -p "require('./packages/models/package.json').version")
          echo "Waiting for @selling-partner-api/models >= ${REQUIRED_VERSION} to be available on npm"

          compare_versions() {
            local required="$1"
            local published="$2"

            IFS=.- read -r req_major req_minor req_patch req_label <<<"$required"
            IFS=.- read -r pub_major pub_minor pub_patch pub_label <<<"$published"

            req_major=${req_major:-0}
            req_minor=${req_minor:-0}
            req_patch=${req_patch:-0}
            pub_major=${pub_major:-0}
            pub_minor=${pub_minor:-0}
            pub_patch=${pub_patch:-0}

            if (( pub_major > req_major )); then return 0; fi
            if (( pub_major < req_major )); then return 1; fi
            if (( pub_minor > req_minor )); then return 0; fi
            if (( pub_minor < req_minor )); then return 1; fi
            if (( pub_patch > req_patch )); then return 0; fi
            if (( pub_patch < req_patch )); then return 1; fi

            if [ -n "$pub_label" ] && [ -z "$req_label" ]; then return 1; fi
            if [ -z "$pub_label" ] && [ -n "$req_label" ]; then return 0; fi

            if [ -n "$pub_label" ] && [ -n "$req_label" ]; then
              if [[ "$pub_label" > "$req_label" ]]; then return 0; fi
              if [[ "$pub_label" < "$req_label" ]]; then return 1; fi
            fi

            return 0
          }

          attempts=0
          max_attempts=18
          sleep_seconds=10

          while true; do
            PUBLISHED_VERSION=$(npm view @selling-partner-api/models version 2>/tmp/npm-error.log || true)

            if [ -n "$PUBLISHED_VERSION" ]; then
              echo "Found published version ${PUBLISHED_VERSION}"
              if compare_versions "$REQUIRED_VERSION" "$PUBLISHED_VERSION"; then
                echo "@selling-partner-api/models ${PUBLISHED_VERSION} satisfies requirement"
                break
              fi
              echo "Published version ${PUBLISHED_VERSION} is lower than required ${REQUIRED_VERSION}"
            else
              echo "npm view failed:"
              cat /tmp/npm-error.log || true
            fi

            attempts=$((attempts + 1))
            if [ "$attempts" -ge "$max_attempts" ]; then
              echo "Timed out waiting for @selling-partner-api/models ${REQUIRED_VERSION} to publish" >&2
              exit 1
            fi

            echo "Retrying in ${sleep_seconds}s (attempt ${attempts}/${max_attempts})..."
            sleep "$sleep_seconds"
          done

      - name: Verify npm token configured
        run: |
          if [ -z "${NPM_TOKEN:-}" ]; then
            echo "NPM_SECRET secret must be configured in the repository settings" >&2
            exit 1
          fi

      - name: Publish @selling-partner-api/sdk to npm
        run: |
          cd packages/sdk
          export NODE_AUTH_TOKEN="${NPM_TOKEN}"
          npm publish --provenance --access public

      - name: Setup Node for GitHub Packages publish
        uses: actions/setup-node@v5
        with:
          node-version: "22"
          registry-url: "https://npm.pkg.github.com"
          scope: "@selling-partner-api"

      - name: Publish @selling-partner-api/sdk to GitHub Packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd packages/sdk
          npm publish --provenance --access public
