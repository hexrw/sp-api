/**
 * Generate SDK rate limit mappings
 *
 * Generate a TypeScript file mapping API paths to rate limits.
 * Uses OpenAPI spec and a JSON file with operationId -> rate limit mappings.
 *
 * @see https://github.com/amzn/selling-partner-api-sdk/blob/main/javascript/sdk/helper/DefaultRateLimitMap.mjs
 * @see https://github.com/amzn/selling-partner-api-sdk/blob/main/resources/rate-limits.yml
 */

import { readFileSync, writeFileSync, existsSync } from "node:fs"
import { dirname, resolve } from "node:path"
import { fileURLToPath } from "node:url"

const scriptDir = dirname(fileURLToPath(import.meta.url))
const packageRoot = resolve(scriptDir, "..")
const modelsPackageRoot = resolve(packageRoot, "..", "models")

const OPENAPI_FILE = resolve(modelsPackageRoot, "src/merged.json")
const RATE_LIMITS_FILE = resolve(packageRoot, "src/assets/rate-limits.json")
const DEST_FILE = resolve(packageRoot, "src/lib/rate-limit/path.ts")

if (!existsSync(OPENAPI_FILE)) {
    throw new Error(`Missing merged OpenAPI specification at ${OPENAPI_FILE}. Run bun run --cwd packages/models build first.`)
}

// Load input files
const rateLimits = JSON.parse(readFileSync(RATE_LIMITS_FILE, "utf-8")) as Record<string, [number, number, number?]>
const openApi = JSON.parse(readFileSync(OPENAPI_FILE, "utf-8"))
// Build a lookup: operationId -> rate limit
const opRateMap: Record<string, [number, number, number?]> = {}
for (const [key, val] of Object.entries(rateLimits)) {
    const [, opName] = key.split("-")
    if (opName) {
        opRateMap[opName] = val
    }
}

// Collect path -> [rate, burst]
const pathLimits: Record<string, [number, number, number?]> = {}
for (const [path, methods] of Object.entries<any>(openApi.paths)) {
    for (const [_method, def] of Object.entries<any>(methods)) {
        if (def.operationId && opRateMap[def.operationId]) {
            pathLimits[path] = opRateMap[def.operationId]
        }
    }
}

// Write output file
const output = /*ts*/ `// Auto-generated by scripts/generate-limits.ts
import type { paths } from "../../paths"

// Some paths are missing rate limits
export const rateLimits: Partial<Record<keyof paths, [number, number, number?]>> = {
${Object.entries(pathLimits)
    .map(([path, [rate, burst, seconds]]) => `    "${path}": [${rate}, ${burst}${seconds ? `, ${seconds}` : ""}]`)
    .join(",\n")}
} as const

export default rateLimits
`

writeFileSync(DEST_FILE, output)

console.log("âœ… Generated path-limits.ts")
